pub const PRELUDE: &str = r#"
(begin
    (define (caar x) (car (car x)))
    (define (cadr x) (car (cdr x)))
    (define (cdar x) (cdr (car x)))
    (define (cddr x) (cdr (cdr x)))
    (define (caaar x) (car (car (car x))))
    (define (caadr x) (car (car (cdr x))))
    (define (cadar x) (car (cdr (car x))))
    (define (caddr x) (car (cdr (cdr x))))
    (define (cdaar x) (cdr (car (car x))))
    (define (cdadr x) (cdr (car (cdr x))))
    (define (cddar x) (cdr (cdr (car x))))
    (define (cdddr x) (cdr (cdr (cdr x))))
    (define (caaaar x) (car (car (car (car x)))))
    (define (caaadr x) (car (car (car (cdr x)))))
    (define (caadar x) (car (car (cdr (car x)))))
    (define (caaddr x) (car (car (cdr (cdr x)))))
    (define (cadaar x) (car (cdr (car (car x)))))
    (define (cadadr x) (car (cdr (car (cdr x)))))
    (define (caddar x) (car (cdr (cdr (car x)))))
    (define (cadddr x) (car (cdr (cdr (cdr x)))))
    (define (cdaaar x) (cdr (car (car (car x)))))
    (define (cdaadr x) (cdr (car (car (cdr x)))))
    (define (cdadar x) (cdr (car (cdr (car x)))))
    (define (cdaddr x) (cdr (car (cdr (cdr x)))))
    (define (cddaar x) (cdr (cdr (car (car x)))))
    (define (cddadr x) (cdr (cdr (car (cdr x)))))
    (define (cdddar x) (cdr (cdr (cdr (car x)))))
    (define (cddddr x) (cdr (cdr (cdr (cdr x)))))
    (define (add1 x) (+ x 1))
    (define (sub1 x) (- x 1))

    (define (moo) (display "There is no cow level!"))
    (define (count-to n) (if (= n 0) 'Done! (count-to (- n 1))))
    (define (sum-to n) (if (= n 0) 0 (+ n (sum-to (- n 1)))))
    (define (fact-pure n) (if (= n 0) 1 (* n (fact-pure (- n 1)))))
    (define fact (lambda (n) (define aux (lambda (n acc) (if (= n 0) acc (aux (- n 1) (* n acc))))) (aux n 1)))
    (define fact2 (lambda (n) (define aux (lambda (n acc) (cond ((= n 0) acc) ((> n 0) (aux (- n 1) (* n acc)))))) (aux n 1)))
    (define (evil n) (+ n (evil (- n 1))))
    (define (fibonacci-pure n) (cond ((= n 1) 0) ((= n 2) 1) ((> n 1) (+ (fibonacci-pure (- n 1)) (fibonacci-pure (- n 2))))))
    (define (fibonacci n) (define (aux n acc1 acc2) (cond ((= n 1) acc1) ((= n 2) acc2) ((> n 2) (aux (- n 1) acc2 (+ acc1 acc2))))) (aux n 0 1))
)
"#;
